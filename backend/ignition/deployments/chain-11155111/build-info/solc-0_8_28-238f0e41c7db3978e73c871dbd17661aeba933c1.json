{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-238f0e41c7db3978e73c871dbd17661aeba933c1",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Marketplace.sol": "project/contracts/Marketplace.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/IERC2981.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC2981.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     *\n     * NOTE: ERC-2981 allows setting the royalty to 100% of the price. In that case all the price would be sent to the\n     * royalty receiver and 0 tokens to the seller. Contracts dealing with royalty should consider empty transfers.\n     */\n    function royaltyInfo(\n        uint256 tokenId,\n        uint256 salePrice\n    ) external view returns (address receiver, uint256 royaltyAmount);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC721/IERC721.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC721/IERC721.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/Marketplace.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport {IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\r\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/**\r\n * @title Minimal non-custodial NFT Marketplace\r\n * @notice Sellers keep tokens in their wallet; buyers purchase with native ETH.\r\n *         Supports protocol fees and optional EIP-2981 royalties (pulled from the NFT).\r\n * @dev    Educational template — not audited. Add pausability, listing expiry,\r\n *         signatures/off-chain orders, and more tests for production.\r\n */\r\ncontract Marketplace is Ownable, ReentrancyGuard {\r\n    struct Listing {\r\n        address nft;\r\n        uint256 tokenId;\r\n        address seller;\r\n        uint256 price; // in wei\r\n        bool active;\r\n    }\r\n\r\n    uint96 public protocolFeeBps; // e.g., 250 = 2.5%\r\n    address public feeRecipient;\r\n\r\n    uint256 public nextListingId;\r\n    mapping(uint256 => Listing) public listings; // listingId => Listing\r\n\r\n    event Listed(\r\n        uint256 indexed listingId,\r\n        address indexed nft,\r\n        uint256 indexed tokenId,\r\n        address seller,\r\n        uint256 price\r\n    );\r\n    event PriceUpdated(uint256 indexed listingId, uint256 oldPrice, uint256 newPrice);\r\n    event Canceled(uint256 indexed listingId);\r\n    event Purchased(\r\n        uint256 indexed listingId,\r\n        address indexed buyer,\r\n        uint256 price,\r\n        uint256 sellerProceeds,\r\n        uint256 protocolFee,\r\n        uint256 royaltyAmount\r\n    );\r\n\r\n    constructor(address _owner, address _feeRecipient, uint96 _protocolFeeBps) Ownable(_owner) {\r\n        require(_feeRecipient != address(0), \"feeRecipient=0\");\r\n        require(_protocolFeeBps <= 1000, \"fee too high\"); // <=10%\r\n        feeRecipient = _feeRecipient;\r\n        protocolFeeBps = _protocolFeeBps;\r\n    }\r\n\r\n    // ------------------------ Admin ------------------------\r\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\r\n        require(_feeRecipient != address(0), \"feeRecipient=0\");\r\n        feeRecipient = _feeRecipient;\r\n    }\r\n\r\n    function setProtocolFeeBps(uint96 _bps) external onlyOwner {\r\n        require(_bps <= 1000, \"fee too high\");\r\n        protocolFeeBps = _bps;\r\n    }\r\n\r\n    // ------------------------ Listing ------------------------\r\n    function list(address nft, uint256 tokenId, uint256 price) external returns (uint256 listingId) {\r\n        require(price > 0, \"price=0\");\r\n        IERC721 t = IERC721(nft);\r\n        require(t.ownerOf(tokenId) == msg.sender, \"not owner\");\r\n        require(\r\n            t.getApproved(tokenId) == address(this) || t.isApprovedForAll(msg.sender, address(this)),\r\n            \"approve marketplace\"\r\n        );\r\n\r\n        listingId = nextListingId++;\r\n        listings[listingId] = Listing({\r\n            nft: nft,\r\n            tokenId: tokenId,\r\n            seller: msg.sender,\r\n            price: price,\r\n            active: true\r\n        });\r\n\r\n        emit Listed(listingId, nft, tokenId, msg.sender, price);\r\n    }\r\n\r\n    function updatePrice(uint256 listingId, uint256 newPrice) external {\r\n        Listing storage l = listings[listingId];\r\n        require(l.active, \"inactive\");\r\n        require(l.seller == msg.sender, \"not seller\");\r\n        require(newPrice > 0, \"price=0\");\r\n        uint256 old = l.price;\r\n        l.price = newPrice;\r\n        emit PriceUpdated(listingId, old, newPrice);\r\n    }\r\n\r\n    function cancel(uint256 listingId) external {\r\n        Listing storage l = listings[listingId];\r\n        require(l.active, \"inactive\");\r\n        require(l.seller == msg.sender, \"not seller\");\r\n        l.active = false;\r\n        emit Canceled(listingId);\r\n    }\r\n\r\n    function buy(uint256 listingId) external payable nonReentrant {\r\n        Listing storage l = listings[listingId];\r\n        require(l.active, \"inactive\");\r\n        require(msg.value == l.price, \"wrong value\");\r\n\r\n        IERC721 t = IERC721(l.nft);\r\n        require(t.ownerOf(l.tokenId) == l.seller, \"owner changed\");\r\n        require(\r\n            t.getApproved(l.tokenId) == address(this) || t.isApprovedForAll(l.seller, address(this)),\r\n            \"not approved\"\r\n        );\r\n\r\n        // effects\r\n        l.active = false;\r\n\r\n        // fees\r\n        uint256 protocolFee = (msg.value * protocolFeeBps) / 10_000;\r\n        (address royaltyRcpt, uint256 royaltyAmt) = _royaltyInfo(l.nft, l.tokenId, msg.value);\r\n        uint256 sellerProceeds = msg.value - protocolFee - royaltyAmt;\r\n\r\n        // interactions\r\n        t.safeTransferFrom(l.seller, msg.sender, l.tokenId); // transfers token first\r\n\r\n        if (protocolFee > 0) {\r\n            (bool okFee, ) = payable(feeRecipient).call{value: protocolFee}(\"\");\r\n            require(okFee, \"fee xfer failed\");\r\n        }\r\n        if (royaltyAmt > 0 && royaltyRcpt != address(0)) {\r\n            (bool okRoy, ) = payable(royaltyRcpt).call{value: royaltyAmt}(\"\");\r\n            require(okRoy, \"royalty xfer failed\");\r\n        }\r\n        (bool okSeller, ) = payable(l.seller).call{value: sellerProceeds}(\"\");\r\n        require(okSeller, \"seller xfer failed\");\r\n\r\n        emit Purchased(listingId, msg.sender, msg.value, sellerProceeds, protocolFee, royaltyAmt);\r\n    }\r\n\r\n    // ------------------------ Views ------------------------\r\n    function getListing(uint256 listingId) external view returns (Listing memory) {\r\n        return listings[listingId];\r\n    }\r\n\r\n    /**\r\n     * @dev Paginates active listings and also returns their IDs.\r\n     * @param cursor start index to scan from (0..nextListingId-1)\r\n     * @param limit  max number of active listings to return\r\n     */\r\n   function getActiveListings(uint256 cursor, uint256 limit)\r\n    external\r\n    view\r\n    returns (Listing[] memory list_, uint256[] memory ids_, uint256 nextCursor_)\r\n{\r\n    uint256 n;\r\n    uint256 i = cursor;\r\n    uint256 maxId = nextListingId;\r\n\r\n    Listing[] memory tmp = new Listing[](limit);\r\n    uint256[] memory idTmp = new uint256[](limit);\r\n\r\n    while (i < maxId && n < limit) {\r\n        Listing memory L = listings[i];\r\n        if (L.active) {\r\n            tmp[n] = L;\r\n            idTmp[n] = i;\r\n            unchecked { n++; }\r\n        }\r\n        unchecked { i++; }\r\n    }\r\n\r\n    list_ = new Listing[](n);\r\n    ids_  = new uint256[](n);\r\n    for (uint256 j = 0; j < n; j++) {\r\n        list_[j] = tmp[j];\r\n        ids_[j]  = idTmp[j];\r\n    }\r\n    nextCursor_ = i;\r\n}\r\n\r\n    // ------------------------ Internal ------------------------\r\n    function _royaltyInfo(address nft, uint256 tokenId, uint256 salePrice)\r\n        internal\r\n        view\r\n        returns (address, uint256)\r\n    {\r\n        // Try/catch avoids revert if NFT doesn't implement 2981\r\n        try IERC2981(nft).royaltyInfo(tokenId, salePrice) returns (address rcpt, uint256 amount) {\r\n            return (rcpt, amount);\r\n        } catch {\r\n            return (address(0), 0);\r\n        }\r\n    }\r\n}\r\n"
      }
    }
  }
}